# Copyright 2020-2024 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For further info, check https://github.com/canonical/charmcraft
name: charmcraft
base: core24
summary: Charmcraft supports Kubernetes operator development and collaboration
license: Apache-2.0
description: |
  Charmcraft enables collaboration between operator developers, and
  publication on Charmhub.io, home of the Open Operator Collection.

  Use `charmcraft` to:

   * Init a new charm file structure
   * Build your Kubernetes operator charm package
   * Register your charm name on Charmhub
   * Upload your charm to Charmhub
   * Release your charm into channels

  You can use charmcraft with operators written in any language but we
  recommend the Python Operator Framework from https://pypi.org/project/ops/
  developed at https://github.com/canonical/operator for ease of development
  and collaboration.

  Charmcraft and the Python Operator Framework extend the operator pattern
  beyond Kubernetes with universal operators that drive Linux apps. The universal
  operator pattern is very exciting for multi-cloud application management.

adopt-info: charmcraft # look for 'craftctl set *' in the charmcraft part
platforms:
  amd64:
  arm64:
  ppc64el:
  riscv64:
  s390x:

# https://github.com/snapcore/snapcraft/issues/4187
environment:
  PATH: "$SNAP/libexec/charmcraft:/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  LD_LIBRARY_PATH: "$SNAP/none"

apps:
  charmcraft:
    # run Python in unbuffered mode
    command: bin/python -u $SNAP/bin/charmcraft
    completer: completion.sh
    environment:
      # have the cache outside of the version dirs (avoids keeping N copies)
      XDG_CACHE_HOME: $SNAP_USER_COMMON/cache
      # same for config
      XDG_CONFIG_HOME: $SNAP_USER_COMMON/config
      CRYPTOGRAPHY_OPENSSL_NO_LEGACY: "true"

  spread:
    command: libexec/charmcraft/craft.spread

confinement: classic

parts:
  build-deps:
    plugin: nil
    build-packages:
      - cargo-1.82
      - rustc-1.82
      # Basic Python build deps
      - pkg-config
      - python3.12-dev
      - libpython3.12-dev
      - python3-dev
      - python3-pip
      - python3-setuptools-scm
      - python3-wheel
      # Secure networking
      - libsodium-dev
      - libssl-dev
      # Foreign function integration (libapt, rust deps, etc.)
      - libffi-dev
      # Allow building python3-apt
      - libapt-pkg-dev
      # Other bits and pieces
      - libgit2-dev # Needed to build pygit2
      - liblzma-dev # Compression/decompression
      - libxml2-dev # Needed for XML integration in craft-parts.
      - libxslt1-dev
      - libyaml-dev # Needed to build libyaml from source
    build-snaps:
      - astral-uv
    override-build: |
      # We need newer versions of cargo and rustc than the cargo
      # and rustc packages provide, but they don't set the `cargo`
      # and `rustc` commands needed by maturin.
      mkdir -p "${CRAFT_PART_INSTALL}/bin"
      ln -s $(which cargo-1.82) "${CRAFT_PART_INSTALL}/bin/cargo"
      ln -s $(which rustc-1.82) "${CRAFT_PART_INSTALL}/bin/rustc"
    prime:
      - -*
  charmcraft-libs:
    plugin: nil
    stage-packages:
      - libffi8 # Python3 foreign functions - used for rust modules
      - libpython3-stdlib
      - libpython3.12-stdlib
      - libpython3.12-minimal
      - python3-minimal
      - python3-pkg-resources
      - python3.12-minimal
      - libgit2-1.7
      - libxslt1.1 # Used by craft-parts's maven plugin.
    build-attributes:
      - enable-patchelf
  charmcraft:
    after: [charmcraft-libs, build-deps]
    source: .
    plugin: uv
    build-environment:
      # Build all packages from source. Prevents issues like #1369.
      # https://github.com/canonical/charmcraft/issues/1369
      - PIP_NO_BINARY: ":all:"
      - UV_NO_BINARY: "true"
      - CRYPTOGRAPHY_OPENSSL_NO_LEGACY: "true"
      - UV_FROZEN: "true"
      - MAKEOPTS: -j$(nproc --all) # Parallel make jobs for things like python-apt
      - UV_COMPILE_BYTECODE: "true"
      - CLICOLOR_FORCE: "true"
    build-attributes:
      - enable-patchelf
    override-build: |
      /snap/snapcraft/current/libexec/snapcraft/craftctl default

      # Install python3-apt
      . $CRAFT_PART_INSTALL/bin/activate
      uv pip install -r requirements-noble.txt

      # No need for this symlink
      rm -f $CRAFT_PART_INSTALL/lib64

      mkdir -p $CRAFT_PART_INSTALL/libexec/charmcraft
      sed -i 's|#!/bin/sh|#!/snap/charmcraft/current/bin/python3|' $CRAFT_PART_INSTALL/bin/craftctl

      version="$(uv pip show charmcraft | grep "Version:" | cut -d' ' -f2)"
      /snap/snapcraft/current/libexec/snapcraft/craftctl set version="${version}"
      [ -n "$(echo $version | grep "post")" ] && grade=devel || grade=stable
      /snap/snapcraft/current/libexec/snapcraft/craftctl set grade="${grade}"

      rm $CRAFT_PART_INSTALL/bin/python*
      ln -s ../usr/bin/python3 $CRAFT_PART_INSTALL/bin/python3
      ln -s python3 $CRAFT_PART_INSTALL/bin/python
    stage:
      - -bin/activate*
      - -bin/chardetect
      - -bin/craft-providers
      - -bin/distro
      - -bin/jsonschema
      - -bin/deactivate*
      - -bin/keyring
      - -bin/normalizer
      - -bin/pip*
      - -bin/pydoc*
      - -bin/snap-helpers
      - -bin/tabulate
    organize:
      bin/craftctl: libexec/charmcraft/craftctl

  bash-completion:
    after: [charmcraft]
    plugin: nil
    build-environment:
      - LD_LIBRARY_PATH: $CRAFT_STAGE/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
      - PYTHONPATH: $CRAFT_STAGE/lib/python3.12/site-packages
    override-build: |
      python3 -m craft_cli.completion $CRAFT_PROJECT_NAME charmcraft.application:get_app_info \
        > $CRAFT_PART_INSTALL/completion.sh

  skopeo:
    plugin: nil
    source: https://github.com/containers/skopeo.git
    source-tag: v1.17.0
    build-environment:
      - DISABLE_DOCS: "1"
      - CGO_ENABLED: "1"
    override-build: |
      CGO=1 go build -ldflags -linkmode=external ./cmd/skopeo
      mkdir "$CRAFT_PART_INSTALL"/bin
      install -m755 skopeo "$CRAFT_PART_INSTALL"/bin/skopeo
    stage-packages:
      - libgpgme11
      - libassuan0
      - libbtrfs0
      - libdevmapper1.02.1
    build-attributes:
      - enable-patchelf
    build-packages:
      - libgpgme-dev
      - libassuan-dev
      - libbtrfs-dev
      - libdevmapper-dev
      - pkg-config
      - golang-go
    organize:
      bin/skopeo: libexec/charmcraft/skopeo

  spread:
    plugin: go
    source: https://github.com/snapcore/spread.git
    source-commit: ae284792596e00d325a1787604fe4ec7e00574aa # 'main' as of 2025-07-30
    build-snaps:
      - go
    build-attributes:
      - enable-patchelf
    build-environment:
      - CGO_ENABLED: "0"
      - GOFLAGS: -trimpath -ldflags=-w -ldflags=-s
    stage:
      - -bin/humbox
    organize:
      bin/spread: libexec/charmcraft/craft.spread

  addons:
    source: ./snap/local
    plugin: dump
    organize:
      # Put sitecustomize in site-packages
      sitecustomize.py: lib/python3.12/site-packages/sitecustomize.py

hooks:
  configure:
    environment:
      PATH: "$SNAP/bin:$PATH"
      PYTHONHOME: "$SNAP"
      PYTHONPATH: "$SNAP/lib/python3.12:$SNAP/usr/lib/python3.12"
