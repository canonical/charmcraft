# Copyright 2020 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For further info, check https://github.com/canonical/charmcraft
name: charmcraft
base: core22
summary: Charmcraft supports Kubernetes operator development and collaboration
description: |
  Charmcraft enables collaboration between operator developers, and
  publication on Charmhub.io, home of the Open Operator Collection.

  Use `charmcraft` to:

   * Init a new charm file structure
   * Build your Kubernetes operator charm package
   * Register your charm name on Charmhub
   * Upload your charm to Charmhub
   * Release your charm into channels

  You can use charmcraft with operators written in any language but we
  recommend the Python Operator Framework from https://pypi.org/project/ops/
  developed at https://github.com/canonical/operator for ease of development
  and collaboration.

  Charmcraft and the Python Operator Framework extend the operator pattern
  beyond Kubernetes with universal operators that drive Linux and
  Windows apps. The universal operator pattern is very exciting for
  multi-cloud application management.
adopt-info: charmcraft  # look for 'snapcraftctl set-*' in the charmcraft part
confinement: classic
license: Apache-2.0

# https://github.com/snapcore/snapcraft/issues/4187
environment:
  PATH: "$SNAP/libexec/charmcraft:/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  LD_LIBRARY_PATH: "$SNAP/none"

architectures:
  - build-on: s390x
  - build-on: ppc64el
  - build-on: arm64
  - build-on: armhf
  - build-on: amd64

apps:
  charmcraft:
    # run Python in unbuffered mode so when it's running internally in the instance it will output
    # all the information promptly and the external Charmcraft will get all lines quickly and show
    # proper timestamps on them
    command: bin/python3 -u $SNAP/bin/charmcraft
    completer: completion.bash
    environment:
      # have the cache outside of the version dirs (avoids keeping N copies)
      XDG_CACHE_HOME: $SNAP_USER_COMMON/cache
      # same for config
      XDG_CONFIG_HOME: $SNAP_USER_COMMON/config
      # just drop the logs here for now (this will change; see #53)
      TMPDIR: $SNAP_USER_COMMON
      # help git find its stuff
      GIT_TEMPLATE_DIR: $SNAP/git/templates
      GIT_EXEC_PATH: $SNAP/git/git-core

build-packages:
  - cargo
  - build-essential
  - intltool
  - libapt-pkg-dev
  - libffi-dev
  - libssl-dev
  - libsodium-dev
  - liblzma-dev
  - libyaml-dev
  - patch
  - pkg-config
  - python3-dev
  - rustc
  - sed

parts:
  bash-completion:
    source: snap/local
    plugin: dump

  charmcraft-libs:
    plugin: nil
    stage-packages:
      - apt
      - apt-transport-https
      - apt-utils
      - binutils
      - execstack
      - gpg
      - gpgv
      - libffi7
      - libsodium23
      - libpython3-stdlib
      - libpython3.10-stdlib
      - libpython3.10-minimal
      - python3-pip
      - python3-setuptools
      - python3-wheel
      - python3-venv
      - python3-minimal
      - python3-distutils
      - python3-pkg-resources
      - python3.10-minimal
      - squashfs-tools
      - xdelta3
    build-attributes:
      - enable-patchelf
    override-build: |
      ${SNAP}/libexec/snapcraft/craftctl default

      echo "Create libsodium symlink..."
      TRIPLET_PATH="$CRAFT_PART_INSTALL/usr/lib/$(gcc -print-multiarch)"
      LIBSODIUM="$(readlink -n "$TRIPLET_PATH/libsodium.so.23")"
      # Remove so the link can be recreated on re-builds
      rm -f "$TRIPLET_PATH/libsodium.so"
      ln -s "$LIBSODIUM" "$TRIPLET_PATH/libsodium.so"

      # Restore patched files
      PYTHON_PACKAGE_PATH="${CRAFT_PART_INSTALL}/usr/lib/python3.10/"
      CTYPES_INIT="ctypes/__init__.py"
      CTYPES_INIT_ORIG="patched/${CTYPES_INIT}.orig"
      [ -f "${CTYPES_INIT_ORIG}" ] && mv "${CTYPES_INIT_ORIG}" "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}"

      # Apply patches
      echo "Patching ctypes..."
      patch -s -b "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}" "${CRAFT_PROJECT_DIR}/snap/local/patches/python/ctypes_init.diff"

      # Save patches to allow rebuilding
      mkdir -p patched/ctypes
      if [ -f "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}.orig" ]; then
        mv "${PYTHON_PACKAGE_PATH}/${CTYPES_INIT}.orig" patched/ctypes
      fi
      # Disable site packages
      sed -i "${CRAFT_PART_INSTALL}/usr/lib/python3.10/site.py" \
        -e 's/^ENABLE_USER_SITE = None$/ENABLE_USER_SITE = False/'

  charmcraft:
    source: .
    plugin: python
    python-packages:
      - wheel
      - pip
      # Limited to < 66 because we need `pkg_resources` and because `python-apt`
      # does not build with the latest.
      - setuptools<66
    python-constraints:
      - constraints.txt
    python-requirements:
      - requirements-focal.txt
      - requirements.txt
    organize:
      # move things around so they're tidier
      bin/craftctl: libexec/snapcraft/craftctl
      usr/lib/git-core: git/git-core
      usr/share/git-core/templates: git/templates
      usr/bin/git: bin/git
    build-attributes:
      - enable-patchelf
    build-environment:
        # Build PyNaCl from source since the wheel files interact
        # strangely with classic snaps. Well, build it all from source.
        - "PIP_NO_BINARY": ":all"
        # Use base image's libsodium for PyNaCl.
        - "SODIUM_INSTALL": "system"
        - "CFLAGS": "$(pkg-config python-3.10 yaml-0.1 --cflags)"
    override-build: |
      ${SNAP}/libexec/snapcraft/craftctl default

      # set the version
      version="$(python3 setup.py --version)"
      ${SNAP}/libexec/snapcraft/craftctl set version="$version"

      # The new implementation still requires this.
      ln -sf ../usr/bin/python3.10 $CRAFT_PART_INSTALL/bin/python3
    after: [charmcraft-libs]
