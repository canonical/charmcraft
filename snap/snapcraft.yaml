# Copyright 2020-2023 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For further info, check https://github.com/canonical/charmcraft
name: charmcraft
base: core22
summary: Charmcraft supports Kubernetes operator development and collaboration
license: Apache-2.0
description: |
  Charmcraft enables collaboration between operator developers, and
  publication on Charmhub.io, home of the Open Operator Collection.

  Use `charmcraft` to:

   * Init a new charm file structure
   * Build your Kubernetes operator charm package
   * Register your charm name on Charmhub
   * Upload your charm to Charmhub
   * Release your charm into channels

  You can use charmcraft with operators written in any language but we
  recommend the Python Operator Framework from https://pypi.org/project/ops/
  developed at https://github.com/canonical/operator for ease of development
  and collaboration.

  Charmcraft and the Python Operator Framework extend the operator pattern
  beyond Kubernetes with universal operators that drive Linux and
  Windows apps. The universal operator pattern is very exciting for
  multi-cloud application management.

adopt-info: charmcraft  # look for 'craftctl set *' in the charmcraft part
architectures:
  - build-on: s390x
  - build-on: ppc64el
  - build-on: arm64
  - build-on: armhf
  - build-on: amd64
  # - build-on: i386  # there is no i386 core20

# https://github.com/snapcore/snapcraft/issues/4187
environment:
  PATH: "$SNAP/libexec/charmcraft:/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  LD_LIBRARY_PATH: "$SNAP/none"

apps:
  charmcraft:
    # run Python in unbuffered mode
    command: bin/python3 -u $SNAP/bin/charmcraft
    completer: completion.bash
    environment:
      # have the cache outside of the version dirs (avoids keeping N copies)
      XDG_CACHE_HOME: $SNAP_USER_COMMON/cache
      # same for config
      XDG_CONFIG_HOME: $SNAP_USER_COMMON/config

grade: stable
confinement: classic

build-packages:
  - cargo
  - rustc
  - pkg-config
  - python3.10-dev
  - libpython3.10-dev
  - libssl-dev
  - libffi-dev
  - python3-wheel
  - python3-pip
  - python3-setuptools-scm


parts:
  # Classic core22 snaps require staged python.
  python3:
    plugin: nil
    build-attributes:
      - enable-patchelf
    stage-packages:
      - libpython3-stdlib
      - libpython3.10-minimal
      - libpython3.10-stdlib
      - python3.10-minimal
      - python3-distutils
      - python3-minimal
      - python3-pip
      - python3-pip-whl
      - python3-setuptools
      - python3-setuptools-whl
      - python3-venv
      - python3-wheel
    override-build: |
      craftctl default
      install -D -m 0755 $CRAFT_PROJECT_DIR/snap/local/sitecustomize.py $CRAFT_PART_INSTALL/usr/lib/python3.10/sitecustomize.py

  charmcraft:
    after: [python3]
    source: .
    plugin: python
    python-requirements:
      - requirements-jammy.txt
      - requirements.txt
    build-attributes:
      - enable-patchelf
    build-packages:
      - libffi-dev
      - libapt-pkg-dev
      - libssl-dev
      - git
    stage-packages:
      - git
      - apt
      - apt-utils
    python-packages: [wheel]
    build-environment:
      - LDFLAGS: -L/usr/lib/python3.10
      - CPPFLAGS: -I/usr/include/python3.10
    override-pull: |
      craftctl default
      # Ensure we don't have a dubious ownership error from git with a remote build.
      git config --global --add safe.directory $CRAFT_PART_SRC
      # set the version
      version="$(python3 setup.py --version)"
      craftctl set version="${version}"
    override-build: |
      craftctl default
      # why is this needed?
      cp -v completion.bash ../install
      sed -i -e '1 s|^#!/.*|#!/snap/charmcraft/current/bin/python -E|' $CRAFT_PART_INSTALL/bin/craftctl
    organize:
      bin/craftctl: libexec/charmcraft/craftctl

hooks:
  configure:
    environment:
      PATH: "$SNAP/bin:$PATH"
