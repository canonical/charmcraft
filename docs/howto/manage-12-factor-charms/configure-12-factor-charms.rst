(configure-12-factor-charms)=

Manage configurations for a 12-factor app charm
===============================================

A charm configuration can be added if your 12-factor app
requires environment variables, for example, to pass a
token for a service. Add the configuration in ``charmcraft.yaml``:

.. code-block:: yaml

    config:
      options:
        token:
          description: The token for the service.
          type: string

.. tabs::

    .. group-tab:: Flask

        A user-defined configuration option will correspond to
        an environment variable generated by the ``paas-charm``
        project to expose the configuration to the Flask workload.
        In general, a configuration option ``config-option-name``
        will be mapped as ``FLASK_CONFIG_OPTION_NAME`` where the
        option name will be converted to upper case, dashes will be
        converted to underscores and the ``FLASK_`` prefix will be
        added. In the example above, the ``token`` configuration will
        be mapped as the ``FLASK_TOKEN`` environment variable. In
        addition to the environment variable, the configuration is
        also available in the Flask variable ``app.config`` without
        the ``FLASK_`` prefix.

            See also: :external+ops:ref:`Ops | Manage configurations
            <manage-configurations>`, `Configuration Handling -- Flask Documentation
            <https://flask.palletsprojects.com/en/3.0.x/config/>`_

    .. group-tab:: Django

        A user-defined configuration option will correspond to an
        environment variable generated by the ``paas-charm`` project
        to expose the configuration to the Django workload. In general,
        a configuration option ``config-option-name`` will be mapped as
        ``DJANGO_CONFIG_OPTION_NAME`` where the option name will be
        converted to upper case, dashes will be converted to underscores
        and the ``DJANGO_`` prefix will be added. In the example above,
        the ``token`` configuration will be mapped as the ``DJANGO_TOKEN``
        environment variable.

            `How to add configuration to a charm <https://juju.is/docs/sdk/config>`_

    .. group-tab:: FastAPI

        A user-defined configuration option will correspond to an environment
        variable generated by the ``paas-charm`` project to expose the
        configuration to the FastAPI workload. In general, a configuration option
        called ``config-option-name`` will be mapped as ``APP_CONFIG_OPTION_NAME``
        where the option name will be converted to upper case, dashes will be
        converted to underscores and the ``APP_`` prefix will be added. In the
        example above, the ``token`` configuration will be mapped as the
        ``APP_TOKEN`` environment variable.

            `How to add configuration to a charm <https://juju.is/docs/sdk/config>`_

    .. group-tab:: Go

        A user-defined configuration option will correspond to an environment
        variable generated by the ``paas-charm`` project to expose the
        configuration to the Go workload. In general, a configuration option
        ``config-option-name`` will be mapped as ``APP_CONFIG_OPTION_NAME``
        where the option name will be converted to upper case, dashes will be
        converted to underscores and the ``APP_`` prefix will be added. In the
        example above, the ``token`` configuration will be mapped as the
        ``APP_TOKEN`` environment variable.

            `How to add configuration to a charm <https://juju.is/docs/sdk/config>`_

The configuration can be set on the deployed charm using:

.. code-block:: bash

    juju config <app name> token=<token>