[project]
name = "charmcraft"
description = "The main tool to build, upload, and develop in general the Juju charms."
dynamic = ["version", "readme"]
dependencies = [
    "craft-application~=1.1",
    "craft-cli>=2.3.0",
    "craft-parts>=1.18",
    "craft-providers",
    "craft-store>=2.4",
    "distro>=1.3.0",
    "humanize>=2.6.0",
    "jsonschema",
    "jinja2",
    # Pydantic will need to be updated all at once with our libraries.
    # When you update it, remove the pydantic constraints from renovate.
    "pydantic>=1.10,<2.0",
    "python-dateutil",
    "pyyaml",
    "requests",
    "requests-toolbelt",
    "requests-unixsocket",
    "snap-helpers",
    "tabulate",
    # Needed until requests-unixsocket supports urllib3 v2
    # https://github.com/msabramo/requests-unixsocket/pull/69
    "urllib3<2.0",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]
requires-python = ">=3.10"

[project.scripts]
charmcraft = "charmcraft.application.main:main"

[project.optional-dependencies]
dev = [
    "coverage",
    "flake8",
    "freezegun",
    "hypothesis~=6.0",
    "pydocstyle",
    "pyfakefs",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-check",
    "pytest-subprocess",
    "responses",
]
lint = [
    "black>=23.10.1,<24.0.0",
    "codespell[tomli]>=2.2.6,<3.0.0",
    "yamllint>=1.32.0,<2.0.0",
]
types = [
    "mypy[reports]~=1.5",
    "pyright==1.1.332",
    "types-python-dateutil",
    "types-requests<2.31.0.7",  # Frozen until we can get urllib3 v2
    "types-setuptools",
    "types-tabulate",
    "types-urllib3",
]
apt = [
    "python-apt>=2.4.0;sys_platform=='linux'"
]

[build-system]
requires = [
    "setuptools>=67.7.2",
    "setuptools_scm[toml]>=7.1"
]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
readme = {file = "README.md"}

[tool.setuptools_scm]
write_to = "charmcraft/_version.py"
# the version comes from the latest annotated git tag formatted as 'X.Y.Z'
# standard version scheme:
#   'X.Y.Z.post<commits since tag>+g<hash>'
# scheme when no tags exist:
#   '0.0.post<total commits>+g<hash>
# scheme when no tags exist and working dir is dirty:
#   '0.0.post<total commits>+g<hash>.d<date formatted as %Y%m%d>'
version_scheme = "post-release"
# deviations from the default 'git describe' command:
# - only match annotated tags
# - only match tags formatted as 'X.Y.Z'
# - exclude '+dirty<hash>' suffix
git_describe_command = "git describe --long --match '[0-9]*.[0-9]*.[0-9]*' --exclude '*[^0-9.]*'"

[tool.setuptools.packages.find]
include = ["*craft*"]
namespaces = false

[tool.black]
target-version = ["py310", "py311"]
line-length = 99

[tool.codespell]
ignore-words-list = "buildd,crate,keyserver,comandos,ro,dedent,dedented,tread"
skip = ".tox,.git,build,.*_cache,__pycache__,*.tar,*.snap,*.png,./node_modules,./docs/_build,.direnv,.venv,venv,.vscode,charmcraft.spec"
quiet-level = 3
check-filenames = true

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = "tests"
xfail_strict = true
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
branch = true
parallel = true
omit = ["tests/**"]

[tool.coverage.report]
skip_empty = true
#fail_under = 80

[tool.pyright]
strict = ["charmcraft"]
pythonVersion = "3.10"
pythonPlatform = "Linux"

[tool.mypy]
python_version = "3.10"
packages = [
    "charmcraft",
]
plugins = ["pydantic.mypy"]
exclude = [
    "build",
    "results",
    "tests",
    "tools",
]
warn_unused_configs = true
warn_redundant_casts = true
strict_equality = true
#warn_return_any = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
#disallow_any_generics = true

[[tool.mypy.overrides]]
# Ignore typing errors in most legacy packages until we fix them.
module=[
    "charmcraft.charm_builder",
    "charmcraft.cmdbase",
    "charmcraft.commands.extensions",
    "charmcraft.commands.pack",
    "charmcraft.commands.store",
    "charmcraft.store.registry",
    "charmcraft.store.store",
    "charmcraft.config",
    "charmcraft.extensions._utils",
    "charmcraft.linters",
    "charmcraft.models.actions",
    "charmcraft.models.basic",
    "charmcraft.models.config",
    "charmcraft.models.charmcraft",
    "charmcraft.package",
    "charmcraft.providers",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["charmcraft"]
disallow_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = ["tests.*"]
strict = false

[tool.ruff]
line-length = 88
target-version = "py310"
extend-exclude = [
    "docs",
    "__pycache__",
    "tools",
    "snap/local",
    "charmcraft/_version.py",  # setuptools_scm generates old-style type annotations.
]
# Follow ST063 - Maintaining and updating linting specifications for updating these.
select = [  # Base linting rule selections.
    # See the internal document for discussion:
    # https://docs.google.com/document/d/1i1n8pDmFmWi4wTDpk-JfnWCVUThPJiggyPi2DYwBBu4/edit
    # All sections here are stable in ruff and shouldn't randomly introduce
    # failures with ruff updates.
    "F",  # The rules built into Flake8
    "E", "W",  # pycodestyle errors and warnings
    "I",  # isort checking
    "N",  # PEP8 naming
    "D",  # Implement pydocstyle checking as well.
    "UP",  # Pyupgrade - note that some of are excluded below due to Python versions
    "YTT",  # flake8-2020: Misuse of `sys.version` and `sys.version_info`
    "ANN",  # Type annotations.
    "BLE",  # Do not catch blind exceptions
    "FBT",  # Disallow boolean positional arguments (make them keyword-only)
    "B0",  # Common mistakes and typos.
    "A",  # Shadowing built-ins.
    "C4", # Encourage comprehensions, which tend to be faster than alternatives.
    "T10",  # Don't call the debugger in production code
    "ISC",  # Implicit string concatenation that can cause subtle issues
    "ICN",  # Only use common conventions for import aliases.
    "INP",  # Implicit namespace packages
    "PYI",  # Linting for type stubs.
    "PT",  # Pytest
    "Q",  # Consistent quotations
    "RSE",  # Errors on pytest raises.
    "RET",  # Simpler logic after return, raise, continue or break
    "SIM",  # Code simplification
    "TCH004",  # Remove imports from type-checking guard blocks if used at runtime
    "TCH005",  # Delete empty type-checking blocks
    "ARG",  # Unused arguments
    "PTH",  # Migrate to pathlib
    "ERA",  # Don't check in commented out code
    "PGH",  # Pygrep hooks
    "PL",  # Pylint
    "TRY",  # Cleaner try/except,
]
extend-select = [
    # Pyupgrade: https://github.com/charliermarsh/ruff#pyupgrade-up
    "UP00", "UP01", "UP02", "UP030", "UP032", "UP033",
    # "UP034",  # Very new, not yet enabled in ruff 0.0.227
    # Annotations: https://github.com/charliermarsh/ruff#flake8-annotations-ann
    "ANN0",  # Type annotations for arguments other than `self` and `cls`
    "ANN2",  # Return type annotations
    "B026",  # Keyword arguments must come after starred arguments
    # flake8-bandit: security testing. https://github.com/charliermarsh/ruff#flake8-bandit-s
    # https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
    "S101", "S102",  # assert or exec
    "S103", "S108",  # File permissions and tempfiles - use #noqa to silence when appropriate.
    "S104",  # Network binds
    "S105", "S106", "S107",  # Hardcoded passwords
    "S110",  # try-except-pass (use contextlib.suppress instead)
    "S113",  # Requests calls without timeouts
    "S3",  # Serialising, deserialising, hashing, crypto, etc.
    "S506",  # Unsafe YAML load
    "S508", "S509",  # Insecure SNMP
    "S701",  # jinja2 templates without autoescape
    "RUF001", "RUF002", "RUF003",  # Ambiguous unicode characters
    "RUF005",  # Encourages unpacking rather than concatenation
    "RUF008",  # Do not use mutable default values for dataclass attributes
    "RUF100",  # #noqa directive that doesn't flag anything
]
ignore = [
    "ANN10",  # Type annotations for `self` and `cls`
    #"E203",  # Whitespace before ":"  -- Commented because ruff doesn't currently check E203
    "E501",  # Line too long (reason: black will automatically fix this for us)
    "D105",  # Missing docstring in magic method (reason: magic methods already have definitions)
    "D107",  # Missing docstring in __init__ (reason: documented in class docstring)
    "D203",  # 1 blank line required before class docstring (reason: pep257 default)
    "D213",  # Multi-line docstring summary should start at the second line (reason: pep257 default)
    "D215",  # Section underline is over-indented (reason: pep257 default)
    "A003",  # Class attribute shadowing built-in (reason: Class attributes don't often get bare references)
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
              # (reason: this creates long lines that get wrapped and reduces readability)

    # Ignored due to common usage in current code
    "TRY003",  # Avoid specifying long messages outside the exception class

    # Charmcraft-specific ignores, to be removed as we modernise the code.
    "ANN0", "ANN2",
    "ARG001", "ARG002", "ARG005",
    "B034",
    "BLE",
    "D417",
    "FBT",
    "N805", "N806",
    "PGH003",
    "PLR0912", "PLR0913", "PLR0915", "PLR1714", "PLR2004", "PLR5501",
    "PLW2901",
    "PT007", "PT011",
    "PTH102", "PTH108", "PTH109", "PTH113", "PTH118", "PTH119", "PTH123",
    "RET505", "RET506", "RET508",
    "S108", "S113", "S324", "S701",
    "SIM102",
    "TRY004", "TRY200",
]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator"]

[tool.ruff.per-file-ignores]
"tests/**.py" = [  # Some things we want for the moin project are unnecessary in tests.
    "D",  # Ignore docstring rules in tests
    "ANN", # Ignore type annotations in tests
    "INP001", # Tests don't need to be in packages.
    "S101",  # Allow assertions in tests
    "S103", # Allow `os.chmod` setting a permissive mask `0o555` on file or directory
    "S108", # Allow Probable insecure usage of temporary file or directory
    "PLR0913",  # Allow many arguments for test functions

    # Charmcraft-specific ignores, to be removed as we modernise the code.
    "A001", "A002",
    "B007", "B015",
    "D100",
    "N802",
    "PT004", "PT012",
    "PTH1",
    "S105", "S106",
    "SIM105", "SIM115",
]
# isort leaves init files alone by default, this makes ruff ignore them too.
"__init__.py" = ["I001"]
