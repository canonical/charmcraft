summary: Recursively pack a bundle with all charms
manual: true
systems:
  - ubuntu-22.04-64
# Run these earlier since they can take a very long time
priority: 100
kill-timeout: 60m

environment:
  BUNDLE/argo: https://github.com/canonical/argo-operators
  # Needs a different workflow for now, but a target for later enabling.
  # BUNDLE/cos_lite: https://github.com/canonical/cos-lite-bundle
  BUNDLE/istio: https://github.com/canonical/istio-operators
  BUNDLE/kfp: https://github.com/canonical/kfp-operators
  # Needs a different workflow
  # BUNDLE/kubeflow: https://github.com/canonical/bundle-kubeflow
  BUNDLE/notebook_operators: https://github.com/canonical/notebook-operators

prepare: |
  git clone --depth=1 "${BUNDLE}" bundle

restore: |
  for directory in $(ls -1 bundle/charms); do
    pushd "bundle/charms/${directory}"
    charmcraft clean
    popd
  done

  rm -rf bundle

execute: |
  cd bundle
  charmcraft pack --verbose --include-all-charms --output-bundle=output_bundle.yaml

  # Ensure that the output bundle.yaml file is the same as the bundle.yaml file
  # within the bundle itself.
  unzip -p *.zip bundle.yaml | diff -s output_bundle.yaml -
  # Ensure at least one charm file is referenced in the bundle.yaml
  test $(grep "charm: ${PWD}" output_bundle.yaml | wc -l) -ge 1
  # Ensure all local charms referenced in the bundle exist
  grep "charm: ${PWD}" output_bundle.yaml | cut -d: -f2 | xargs file -E

  # Test deploying the bundle.
  # TODO: install juju on the runner and re-enable this.
  # juju deploy --dry-run *.zip
