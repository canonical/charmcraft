###########################################
# IMPORTANT
# Comments matter!
# The docs use the wrapping comments as
# markers for including said instructions
# as snippets in the docs.
###########################################
summary: Custom action in a Flask app

kill-timeout: 120m

environment:

execute: |
  # Move everything to $HOME so that Juju deployment works
  mv *.yaml *.py *.txt $HOME
  cd $HOME

  # Don't use the staging store for this test
  unset CHARMCRAFT_STORE_API_URL
  unset CHARMCRAFT_UPLOAD_URL
  unset CHARMCRAFT_REGISTRY_URL

  # MicroK8s config setup
  microk8s status --wait-ready
  microk8s enable hostpath-storage
  microk8s enable registry
  microk8s enable ingress

  # Bootstrap controller
  juju bootstrap microk8s dev-controller

  # [docs:create-venv]
  sudo apt update && sudo apt install python3-venv -y
  python3 -m venv .venv
  source .venv/bin/activate
  # [docs:create-venv-end]

  # [docs:install-requirements]
  pip install -r requirements.txt
  # [docs:install-requirements-end]

  flask run -p 8000 &
  retry -n 5 --wait 2 curl --fail localhost:8000

  # [docs:curl-flask]
  curl localhost:8000
  # [docs:curl-flask-end]

  kill $!

  # [docs:create-rockcraft-yaml]
  rockcraft init --profile flask-framework
  # [docs:create-rockcraft-yaml-end]

  sed -i "s/name: .*/name: flask-hello-world/g" rockcraft.yaml
  sed -i "s/amd64/$(dpkg --print-architecture)/g" rockcraft.yaml

  # [docs:pack]
  rockcraft pack
  # [docs:pack-end]

  # [docs:skopeo-copy]
  rockcraft.skopeo --insecure-policy copy --dest-tls-verify=false \
    oci-archive:flask-hello-world_0.1_$(dpkg --print-architecture).rock \
    docker://localhost:32000/flask-hello-world:0.1
  # [docs:skopeo-copy-end]

  # [docs:create-charm-dir]
  mkdir charm
  cd charm
  # [docs:create-charm-dir-end]

  # [docs:charm-init]
  charmcraft init --profile flask-framework --name flask-hello-world
  # [docs:charm-init-end]

  # [docs:charm-pack]
  charmcraft pack
  # [docs:charm-pack-end]

  # [docs:add-juju-model]
  juju add-model flask-hello-world
  # [docs:add-juju-model-end]

  #[docs:add-model-constraints]
  juju set-model-constraints -m flask-hello-world arch=$(dpkg --print-architecture)
  #[docs:add-model-constraints-end]

  # [docs:deploy-flask-app]
  juju deploy \
    ./flask-hello-world_ubuntu-22.04-$(dpkg --print-architecture).charm \
    flask-hello-world --resource \
    flask-app-image=localhost:32000/flask-hello-world:0.1
  # [docs:deploy-flask-app-end]

  # [docs:deploy-nginx]
  juju deploy nginx-ingress-integrator --channel=latest/stable --trust
  juju integrate nginx-ingress-integrator flask-hello-world
  # [docs:deploy-nginx-end]

  # [docs:config-nginx]
  juju config nginx-ingress-integrator \
    service-hostname=flask-hello-world path-routes=/
  # [docs:config-nginx-end]

  # give Juju some time to deploy the apps
  juju wait-for application flask-hello-world --query='status=="active"' --timeout 10m
  juju wait-for application nginx-ingress-integrator --query='status=="active"' --timeout 10m

  # [docs:curl-init-deployment]
  curl http://flask-hello-world --resolve flask-hello-world:80:127.0.0.1
  # [docs:curl-init-deployment-end]

  # add custom action to charmcraft.yaml
  cat $HOME/updatelogfile_action_charmcraft.yaml >> charmcraft.yaml

  # add custom action to src/charm.py
  cat $HOME/updatelogfile_action_charm.py > $HOME/charm/src/charm.py

  # charmcraft clean and charmcraft pack
  charmcraft clean
  charmcraft pack

  # refresh the deployment
  juju refresh flask-hello-world \
    --path=./flask-hello-world_ubuntu-22.04-$(dpkg --print-architecture).charm \
    --resource flask-app-image=localhost:32000/flask-hello-world:0.1

  # wait for the Flask app to come back to active idle
  juju wait-for application flask-hello-world --query='status=="maintenance"' --timeout 10m
  juju wait-for application flask-hello-world --query='status=="active"' --timeout 10m

  # make sure it's in listed actions
  juju actions flask-hello-world | grep updatelogfile

  # make sure the action runs successfully
  juju run flask-hello-world/0 updatelogfile logfile="/tmp/example.log" | grep "written to"

  # [docs:clean-environment]
  charmcraft clean
  # Back out to main directory for cleanup
  cd ..
  rockcraft clean
  # exit and delete the virtual environment
  deactivate
  rm -rf charm .venv __pycache__
  # delete all the files created during the tutorial
  rm flask-hello-world_0.1_$(dpkg --print-architecture).rock \
    rockcraft.yaml app.py requirements.txt
  # Remove the juju model
  juju destroy-model flask-hello-world --destroy-storage --no-prompt --force
  # [docs:clean-environment-end]
