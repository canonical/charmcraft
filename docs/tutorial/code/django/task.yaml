###########################################
# IMPORTANT
# Comments matter!
# The docs use the wrapping comments as
# markers for including said instructions
# as snippets in the docs.
###########################################
summary: Getting started with Django tutorial

kill-timeout: 180m

environment:

execute: |
  # Move everything to $HOME so that Juju deployment works
  mv *.yaml *.py *.txt $HOME
  cd $HOME

  # Don't use the staging store for this test
  unset CHARMCRAFT_STORE_API_URL
  unset CHARMCRAFT_UPLOAD_URL
  unset CHARMCRAFT_REGISTRY_URL

  # Add setup instructions
  # (Ran into issues in prepare section)
  # (don't install charmcraft)
  snap install rockcraft --classic
  snap install lxd
  lxd init --auto
  snap install microk8s --channel=1.31-strict/stable
  snap install juju --channel=3.5/stable
  snap refresh juju --channel=3.5/stable --amend

  # Juju config setup
  lxc network set lxdbr0 ipv6.address none
  mkdir -p ~/.local/share

  # MicroK8s config setup
  microk8s status --wait-ready
  microk8s enable hostpath-storage
  microk8s enable registry
  microk8s enable ingress

  # Bootstrap controller
  juju bootstrap microk8s dev-controller

  # Create working dir and cd
  mkdir django-hello-world
  cd django-hello-world

  # [docs:create-venv]
  sudo apt update && sudo apt install python3-venv -y
  python3 -m venv .venv
  source .venv/bin/activate
  # [docs:create-venv-end]

  mv $HOME/requirements.txt $HOME/django-hello-world/
  # [docs:install-requirements]
  pip install -r requirements.txt
  # [docs:install-requirements-end]

  # [docs:django-startproject]
  django-admin startproject django_hello_world
  # [docs:django-startproject-end]

  # cd into django project dir
  cd django_hello_world

  # Update settings.py file
  cat $HOME/settings_local_run.py > $HOME/django-hello-world/django_hello_world/django_hello_world/settings.py

  # Run Django app locally
  ./manage.py runserver 0.0.0.0:8000 &

  # Test the Django app
  retry -n 5 --wait 2 curl --fail localhost:8000

  curl localhost:8000 | grep Congratulations

  kill $!
  cd $HOME/django-hello-world

  # [docs:create-rockcraft-yaml]
  rockcraft init --profile django-framework
  # [docs:create-rockcraft-yaml-end]

  sed -i "s/name: .*/name: django-hello-world/g" rockcraft.yaml
  sed -i "s/amd64/$(dpkg --print-architecture)/g" rockcraft.yaml

  # Update settings.py file
  cat $HOME/settings_init_rock.py > $HOME/django-hello-world/django_hello_world/django_hello_world/settings.py

  # [docs:pack]
  rockcraft pack
  # [docs:pack-end]

  # [docs:skopeo-copy]
  rockcraft.skopeo --insecure-policy copy --dest-tls-verify=false \
    oci-archive:django-hello-world_0.1_$(dpkg --print-architecture).rock \
    docker://localhost:32000/django-hello-world:0.1
  # [docs:skopeo-copy-end]

  # [docs:create-charm-dir]
  mkdir charm
  cd charm
  # [docs:create-charm-dir-end]

  # [docs:charm-init]
  charmcraft init --profile django-framework --name django-hello-world
  # [docs:charm-init-end]

  # Add postgresql_client to charmcraft.yaml
  cat $HOME/postgres_requires_charmcraft.yaml >> charmcraft.yaml

  # [docs:charm-pack]
  charmcraft pack
  # [docs:charm-pack-end]

  # [docs:add-juju-model]
  juju add-model django-hello-world
  # [docs:add-juju-model-end]

  # [docs:add-model-constraints]
  juju set-model-constraints -m django-hello-world \
    arch=$(dpkg --print-architecture)
  # [docs:add-model-constraints-end]

  # [docs:deploy-django-app]
  juju deploy \
    ./django-hello-world_ubuntu-22.04-$(dpkg --print-architecture).charm \
    django-hello-world --resource \
    django-app-image=localhost:32000/django-hello-world:0.1
  # [docs:deploy-django-app-end]

  # [docs:deploy-postgres]
  juju deploy postgresql-k8s --trust
  # [docs:deploy-postgres-end]

  # [docs:integrate-postgres]
  juju integrate django-hello-world postgresql-k8s
  # [docs:integrate-postgres-end]

  # Check that django-hello-world and postgres are active idle
  juju wait-for application postgresql-k8s --query='status=="active"' --timeout 10m
  juju wait-for application django-hello-world --query='status=="active"' --timeout 10m

  # [docs:config-debug]
  juju config django-hello-world django-debug=true
  # [docs:config-debug-end]

  # [docs:deploy-nginx]
  juju deploy nginx-ingress-integrator --channel=latest/stable --trust
  juju integrate nginx-ingress-integrator django-hello-world
  # [docs:deploy-nginx-end]

  # [docs:config-nginx]
  juju config nginx-ingress-integrator \
    service-hostname=django-hello-world path-routes=/
  # [docs:config-nginx-end]

  # give Juju some time to deploy the apps
  juju wait-for application django-hello-world --query='status=="active"' --timeout 10m
  juju wait-for application nginx-ingress-integrator --query='status=="active"' --timeout 10m

  juju status --relations
  sleep 30s

  # curl the Django app
  curl http://django-hello-world --resolve django-hello-world:80:127.0.0.1 | grep Congratulations

  cd ..
  cd django_hello_world

  # [docs:startapp-greeting]
  django-admin startapp greeting
  # [docs:startapp-greeting-end]

  # Update greeting/views.py file
  cat $HOME/views_greeting.py > greeting/views.py

  # Create greeting/urls.py file
  cat $HOME/urls_greeting.py > greeting/urls.py

  # Update django_hello_world/urls.py file
  cat $HOME/urls_django_hello_world.py > django_hello_world/urls.py

  cd ..
  sed -i "s/version: .*/version: 0.2/g" rockcraft.yaml

  # [docs:repack-update]
  rockcraft pack
  rockcraft.skopeo --insecure-policy copy --dest-tls-verify=false \
    oci-archive:django-hello-world_0.2_$(dpkg --print-architecture).rock \
    docker://localhost:32000/django-hello-world:0.2
  # [docs:repack-update-end]

  # [docs:refresh-deployment]
  cd charm
  juju refresh django-hello-world \
      --path=./django-hello-world_ubuntu-22.04-$(dpkg --print-architecture).charm \
      --resource django-app-image=localhost:32000/django-hello-world:0.2
  # [docs:refresh-deployment-end]

  # [docs:disable-debug-mode]
  juju config django-hello-world django-debug=false
  # [docs:disable-debug-mode-end]

  # give Juju some time to refresh the app
  juju wait-for application django-hello-world --query='status=="maintenance"' --timeout 10m
  juju wait-for application django-hello-world --query='status=="active"' --timeout 10m

  # curl and check that the response is Hello, world!
  curl http://django-hello-world --resolve django-hello-world:80:127.0.0.1 | grep Hello

  cd ..
  # Update django_hello_world/greeting/views.py
  cat $HOME/views_greeting_configuration.py > django_hello_world/greeting/views.py

  sed -i "s/version: .*/version: 0.3/g" rockcraft.yaml

  # [docs:repack-2nd-update]
  rockcraft pack
  rockcraft.skopeo --insecure-policy copy --dest-tls-verify=false \
    oci-archive:django-hello-world_0.3_$(dpkg --print-architecture).rock \
    docker://localhost:32000/django-hello-world:0.3
  # [docs:repack-2nd-update-end]

  cd charm

  # Update greeting config in charmcraft.yaml
  cat $HOME/greeting_charmcraft.yaml >> ./charmcraft.yaml

  # [docs:repack-refresh-2nd-deployment]
  charmcraft pack
  juju refresh django-hello-world \
    --path=./django-hello-world_ubuntu-22.04-$(dpkg --print-architecture).charm \
    --resource django-app-image=localhost:32000/django-hello-world:0.3
  # [docs:repack-refresh-2nd-deployment-end]

  # Wait for django-hello-world to be active
  juju wait-for application django-hello-world --query='status=="active"' --timeout 10m

  # curl and check that the response is still Hello, world!
  curl http://django-hello-world --resolve django-hello-world:80:127.0.0.1 | grep Hello

  # [docs:change-config]
  juju config django-hello-world greeting='Hi!'
  # [docs:change-config-end]

  # make sure that the application updates
  juju wait-for application django-hello-world --query='status=="maintenance"' --timeout 10m
  juju wait-for application django-hello-world --query='status=="active"' --timeout 10m

  # curl and check that the response is now Hi
  curl http://django-hello-world --resolve django-hello-world:80:127.0.0.1 | grep Hi

  # [docs:clean-environment]
  charmcraft clean
  # Back out to main directory for cleanup
  cd ..
  rockcraft clean
  # exit and delete the virtual environment
  deactivate
  rm -rf .venv
  # delete all the files created during the tutorial
  rm -rf charm __pycache__ django_hello_world
  rm django-hello-world_0.1_$(dpkg --print-architecture).rock \
    django-hello-world_0.2_$(dpkg --print-architecture).rock \
    django-hello-world_0.3_$(dpkg --print-architecture).rock \
    rockcraft.yaml requirements.txt
  # Remove the juju model
  juju destroy-model django-hello-world --destroy-storage --no-prompt --force
  # [docs:clean-environment-end]
