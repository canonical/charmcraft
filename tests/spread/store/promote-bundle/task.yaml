summary: full bundle cycle -- pack, upload, check revisions, release, check channel map

include: 
  - tests/

prepare: |
  tests.pkgs install jq

  mkdir bundle
  cd bundle

  echo "Read me."  > README.md

  cat <<- EOF > charmcraft.yaml
  type: bundle
  charmhub:
    api-url: https://api.staging.charmhub.io
    storage-url: https://storage.staging.snapcraftcontent.com
  EOF

  cat <<- EOF > bundle.yaml
  name: $BUNDLE_DEFAULT_NAME
  series: focal
  EOF

restore: |
  rm -rf bundle

execute: |
  cd bundle
  start_datetime=$(date -u --iso-8601=seconds)

  # pack
  charmcraft pack --verbose
  test -f $BUNDLE_DEFAULT_NAME.zip

  # upload and get uploaded revision
  uploaded_revno=$(charmcraft upload $BUNDLE_DEFAULT_NAME.zip --format=json | jq .revision)

  # check the uploaded revision is newer than start datetime (note we're 
  # not using latest, as it may not be the one we uploaded here, because 
  # multiple tests running concurrently)
  up_revision=$(charmcraft revisions $BUNDLE_DEFAULT_NAME --format=json | jq -r --arg revno $uploaded_revno '.[] | select(.revision|tostring==$revno)')
  up_revision_created=$(echo $up_revision | jq -r .created_at)
  [[ $start_datetime < $up_revision_created ]]

  # release that last revision to edge
  charmcraft release $BUNDLE_DEFAULT_NAME -r $uploaded_revno -c edge

  # validate the channel map
  edge_release=$(charmcraft status $BUNDLE_DEFAULT_NAME --format=json | jq -r '.[] | select(.track=="latest") | .mappings[0].releases | .[] | select(.channel=="latest/edge")')
  edge_revision=$(echo $edge_release | jq -r .revision)
  # check that the current release greater or equal than what was 
  # uploaded, because other tests running concurrently may have
  # also released (but for sure cannot be a previous revision)
  test $edge_revision -ge $uploaded_revno  

